{"ast":null,"code":"var _s = $RefreshSig$();\n// Import necessary hooks from the React library\nimport { useEffect, useState } from \"react\";\n\n// Import the makeRequest function from a custom module \"../makeRequest\"\nimport { makeRequest } from \"../makeRequest\";\n\n// Define a custom React hook called useFetch, taking a URL as input\nconst useFetch = url => {\n  _s();\n  // State declarations using the useState hook\n  const [data, setData] = useState(null); // Holds the fetched data\n  const [loading, setLoading] = useState(false); // Indicates if data is being fetched\n  const [error, setError] = useState(false); // Indicates if an error occurred during fetching\n\n  // useEffect hook to perform data fetching when the 'url' dependency changes\n  useEffect(() => {\n    // Define an asynchronous function fetchData to handle data fetching\n    const fetchData = async () => {\n      try {\n        setLoading(true); // Set loading state to true before making the request\n        const res = await makeRequest.get(url); // Make a request using the provided URL\n        setData(res.data.data); // Update the 'data' state with the fetched data\n      } catch (err) {\n        setError(true); // If an error occurs during fetching, set the 'error' state to true\n      }\n\n      setLoading(false); // Set loading state back to false, whether the fetch succeeds or fails\n    };\n\n    // Call the fetchData function when the component mounts or the 'url' dependency changes\n    fetchData();\n  }, [url]); // useEffect will re-run whenever the 'url' changes\n\n  // Return an object with 'data', 'loading', and 'error' state values to be used by the component\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\n// Export the custom hook to be used in other components\n_s(useFetch, \"bUDdnDopLs7sI4ubr9BcUYSaQYs=\");\nexport default useFetch;","map":{"version":3,"names":["useEffect","useState","makeRequest","useFetch","url","_s","data","setData","loading","setLoading","error","setError","fetchData","res","get","err"],"sources":["C:/Users/Marcia/OneDrive/Escritorio/Web-dev/Working/Ecommerce-2023/client/src/hooks/useFetch.js"],"sourcesContent":["// Import necessary hooks from the React library\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// Import the makeRequest function from a custom module \"../makeRequest\"\r\nimport { makeRequest } from \"../makeRequest\";\r\n\r\n// Define a custom React hook called useFetch, taking a URL as input\r\nconst useFetch = (url) => {\r\n  // State declarations using the useState hook\r\n  const [data, setData] = useState(null); // Holds the fetched data\r\n  const [loading, setLoading] = useState(false); // Indicates if data is being fetched\r\n  const [error, setError] = useState(false); // Indicates if an error occurred during fetching\r\n\r\n  // useEffect hook to perform data fetching when the 'url' dependency changes\r\n  useEffect(() => {\r\n    // Define an asynchronous function fetchData to handle data fetching\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true); // Set loading state to true before making the request\r\n        const res = await makeRequest.get(url); // Make a request using the provided URL\r\n        setData(res.data.data); // Update the 'data' state with the fetched data\r\n      } catch (err) {\r\n        setError(true); // If an error occurs during fetching, set the 'error' state to true\r\n      }\r\n      setLoading(false); // Set loading state back to false, whether the fetch succeeds or fails\r\n    };\r\n\r\n    // Call the fetchData function when the component mounts or the 'url' dependency changes\r\n    fetchData();\r\n  }, [url]); // useEffect will re-run whenever the 'url' changes\r\n\r\n  // Return an object with 'data', 'loading', and 'error' state values to be used by the component\r\n  return { data, loading, error };\r\n};\r\n\r\n// Export the custom hook to be used in other components\r\nexport default useFetch;\r\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AACA,SAASC,WAAW,QAAQ,gBAAgB;;AAE5C;AACA,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QAClB,MAAMI,GAAG,GAAG,MAAMX,WAAW,CAACY,GAAG,CAACV,GAAG,CAAC,CAAC,CAAC;QACxCG,OAAO,CAACM,GAAG,CAACP,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZJ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB;;MACAF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC;;IAED;IACAG,SAAS,EAAE;EACb,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEX;EACA,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;;AAED;AAAAL,EAAA,CA5BMF,QAAQ;AA6Bd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}